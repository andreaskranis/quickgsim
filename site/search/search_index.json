{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Sim! Welcome to the QuickgSim Documentation Quikgsim was designed to be easily extensible to enable users to add functionality to fit specific requirements. The class diagram below depicts the overall structure between the classes that make up QuickgSim. classDiagram Genotype *-- Animal: has a genotype Phenotype *-- Animal: optional phenotype Variant *-- Chrom: has many in self.variants Chrom *-- Genome: has many in self.chroms Chrom: +name Chrom: +length Chrom: +morgans Chrom: +nvars Chrom: +variants Chrom: +pos_idx Chrom: +xover_pos Genome --> Genotype : blueprint for genotype Genome: +chroms Genome: +rs Genome <|-- CustomGenome: modify recomb and/or mut CustomGenome: +recomb_events() CustomGenome: +place_recomb() CustomGenome: +mutate_gamete() SQLITE_bend --> Animal : persistant storage Extend functionality As seen in the class digram, it is possible to extend and modify the functionality of the Genome class. In the examples/ folder the notebook customGenome.ipynb shows two examples on how to capitalise on inheritance to tweak the model used to simulate recombination. The first example shows how to approximate the differences in recombination rate in telomeres and centromeres. The second example uses the Bionomial distribution to determine the number of cross-overs instead of the Poisson in the base Class Genome . safe to ignore for nopw UserDict <|-- Genome UserDict <|-- Genotype DataClass <|-- Animal DataClass <|-- Chrom","title":"Home"},{"location":"#extend-functionality","text":"As seen in the class digram, it is possible to extend and modify the functionality of the Genome class. In the examples/ folder the notebook customGenome.ipynb shows two examples on how to capitalise on inheritance to tweak the model used to simulate recombination. The first example shows how to approximate the differences in recombination rate in telomeres and centromeres. The second example uses the Bionomial distribution to determine the number of cross-overs instead of the Poisson in the base Class Genome .","title":"Extend functionality"},{"location":"#safe-to-ignore-for-nopw","text":"UserDict <|-- Genome UserDict <|-- Genotype DataClass <|-- Animal DataClass <|-- Chrom","title":"safe to ignore for nopw"},{"location":"animal-reference/","text":"PRETEXT I can add stuff here before the \"\"\" \"\"\" of the class Implementing the Animal class Animal dataclass Dataclass implementation to provide alternative access to Genotype() Attributes: Name Type Description tag str An identifier for the animal. Useful for retrieving in backend sex int The sex of the animal [1:male, 2:female] genotype(dict) A dictionary compatible to a Genotype (ie a UserDict) pcr(list) A mcr(list)","title":"animal"},{"location":"animal-reference/#pretext","text":"I can add stuff here before the \"\"\" \"\"\" of the class Implementing the Animal class","title":"PRETEXT"},{"location":"animal-reference/#quickgsim.animal.Animal","text":"Dataclass implementation to provide alternative access to Genotype() Attributes: Name Type Description tag str An identifier for the animal. Useful for retrieving in backend sex int The sex of the animal [1:male, 2:female] genotype(dict) A dictionary compatible to a Genotype (ie a UserDict) pcr(list) A mcr(list)","title":"Animal"},{"location":"quick_setup-reference/","text":"Provides functions to generate SNP panels with fixed characteristics. The modules also provides functions to validate the imported data to ensure that are suitable for quicgsim. !!! todo * For module TODOs equidistant_genome ( instructions , genome = None , rs = None ) A genome with variants placed in equal distances Parameters: Name Type Description Default instructions dict A dictionary with key the chrom name and value a list with two elements: (i) number of variants (ii) the length in morgans required genome Genome An optional instance of a genome object. If none is given, it will use the genome.Genome() baseclass None rs np.random.default_rng A random number generator, conveniently from randomise() None Source code in quickgsim/quick_setup.py def equidistant_genome ( instructions , genome = None , rs = None ): \"\"\"A genome with variants placed in equal distances Args: instructions (dict): A dictionary with key the chrom name and value a list with two elements: (i) number of variants (ii) the length in morgans genome (Genome): An optional instance of a genome object. If none is given, it will use the genome.Genome() baseclass rs (np.random.default_rng, optional): A random number generator, conveniently from randomise() \"\"\" if genome : g = genome else : g = Genome ( rs = rs ) _fill_equidistant_variants ( instructions , g ) return g","title":"quick_setup"},{"location":"quick_setup-reference/#quickgsim.quick_setup.equidistant_genome","text":"A genome with variants placed in equal distances Parameters: Name Type Description Default instructions dict A dictionary with key the chrom name and value a list with two elements: (i) number of variants (ii) the length in morgans required genome Genome An optional instance of a genome object. If none is given, it will use the genome.Genome() baseclass None rs np.random.default_rng A random number generator, conveniently from randomise() None Source code in quickgsim/quick_setup.py def equidistant_genome ( instructions , genome = None , rs = None ): \"\"\"A genome with variants placed in equal distances Args: instructions (dict): A dictionary with key the chrom name and value a list with two elements: (i) number of variants (ii) the length in morgans genome (Genome): An optional instance of a genome object. If none is given, it will use the genome.Genome() baseclass rs (np.random.default_rng, optional): A random number generator, conveniently from randomise() \"\"\" if genome : g = genome else : g = Genome ( rs = rs ) _fill_equidistant_variants ( instructions , g ) return g","title":"equidistant_genome()"}]}